digraph AST {
node0 [label="<program>",lexeme=""];
node1 [label="<function_decl>",lexeme=""];
node2 [label="int",lexeme=""];
node1 -> node2;
node3 [label="ID",lexeme="fac"];
node1 -> node3;
node4 [label="<args>",lexeme=""];
node5 [label="<arg>",lexeme=""];
node6 [label="int",lexeme=""];
node5 -> node6;
node7 [label="ID",lexeme="n"];
node5 -> node7;
node4 -> node5;
node1 -> node4;
node8 [label="<stmts>",lexeme=""];
node9 [label="IF",lexeme=""];
node10 [label="LESS",lexeme=""];
node11 [label="ID",lexeme="n"];
node10 -> node11;
node12 [label="INTLITERAL",lexeme="2"];
node10 -> node12;
node9 -> node10;
node13 [label="<stmts>",lexeme=""];
node14 [label="RETURN",lexeme=""];
node15 [label="INTLITERAL",lexeme="1"];
node14 -> node15;
node13 -> node14;
node9 -> node13;
node16 [label="ELSE",lexeme=""];
node17 [label="<stmts>",lexeme=""];
node18 [label="RETURN",lexeme=""];
node19 [label="STAR",lexeme=""];
node20 [label="<func call>",lexeme=""];
node21 [label="ID",lexeme="fac"];
node20 -> node21;
node22 [label="<exps>",lexeme=""];
node23 [label="MINUS",lexeme=""];
node24 [label="ID",lexeme="n"];
node23 -> node24;
node25 [label="INTLITERAL",lexeme="1"];
node23 -> node25;
node22 -> node23;
node20 -> node22;
node19 -> node20;
node26 [label="ID",lexeme="n"];
node19 -> node26;
node18 -> node19;
node17 -> node18;
node16 -> node17;
node9 -> node16;
node8 -> node9;
node1 -> node8;
node0 -> node1;
node27 [label="<function_decl>",lexeme=""];
node28 [label="int",lexeme=""];
node27 -> node28;
node29 [label="ID",lexeme="main"];
node27 -> node29;
node30 [label="<args>",lexeme=""];
node27 -> node30;
node31 [label="<stmts>",lexeme=""];
node32 [label="<var_decl>",lexeme=""];
node33 [label="ID",lexeme="t"];
node32 -> node33;
node34 [label="INTLITERAL",lexeme="5"];
node32 -> node34;
node31 -> node32;
node35 [label="<func call>",lexeme=""];
node36 [label="ID",lexeme="print_int"];
node35 -> node36;
node37 [label="<exps>",lexeme=""];
node38 [label="<func call>",lexeme=""];
node39 [label="ID",lexeme="fac"];
node38 -> node39;
node40 [label="<exps>",lexeme=""];
node41 [label="ID",lexeme="t"];
node40 -> node41;
node38 -> node40;
node37 -> node38;
node35 -> node37;
node31 -> node35;
node27 -> node31;
node0 -> node27;
}